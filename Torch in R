'''Код, используемый для прогонозирования ежемесячных продаж бренда Донормил. Метод прогнозирования - Deep Learning'''


df<-data.frame(donormyl_)
df$Date<- as.Date(df$Date, format = "%d/%m/%Y")

library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(lubridate)
library(torch)
library(luz)
library(tsibble)
library(feasts)
library(tsibbledata)


sales_dataset <- dataset(
name = "sales_dataset",
initialize = function(x, n_timesteps, sample_frac = 1) {
self$n_timesteps <- n_timesteps
self$x <- torch_tensor((x - train_mean) / train_sd)
n <- length(self$x) - self$n_timesteps
self$starts <- sort(sample.int(
n = n,
size = n * sample_frac
))
},
.getitem = function(i) {
start <- self$starts[i]
end <- start + self$n_timesteps - 1
list(
x = self$x[start:end],
y = self$x[end + 1]
)
},
.length = function() {
length(self$starts)
}
)

sales_monthly<-df

sales_train <- sales_monthly %>%
      filter(Date >= as.Date("2020-01-01") & Date <= as.Date("2022-06-01")) %>% 
      as_tibble() %>%
      select(Sales) %>%
      as.matrix()

sales_valid <- sales_monthly %>%
        filter(Date >= as.Date("2022-06-01") & Date <= as.Date("2023-06-01")) %>% 
        as_tibble() %>%
        select(Sales) %>%
        as.matrix()

sales_test <- sales_monthly %>%
        filter(Date >= as.Date("2023-06-01") & Date <= as.Date("2023-10-01")) %>%
        as_tibble() %>%
        select(Sales) %>%
        as.matrix()

train_mean <- mean(sales_train)
train_sd <- sd(sales_train)

n_timesteps<-1
train_ds <- sales_dataset(sales_train, n_timesteps)
valid_ds <- sales_dataset(sales_valid, n_timesteps)
test_ds <- sales_dataset(sales_test, n_timesteps)

batch_size <- 128

train_dl <- train_ds %>%
dataloader(batch_size = batch_size, shuffle = TRUE)
valid_dl <- valid_ds %>%
dataloader(batch_size = batch_size)
test_dl <- test_ds %>%
dataloader(batch_size = length(test_ds))

b <- train_dl %>%
dataloader_make_iter() %>%
dataloader_next()

model <- nn_module(
initialize = function(input_size,
hidden_size,
dropout = 0.2,
num_layers = 1,
rec_dropout = 0) {
self$num_layers <- num_layers
self$rnn <- nn_lstm(
input_size = input_size,
hidden_size = hidden_size,
num_layers = num_layers,
dropout = rec_dropout,
batch_first = TRUE
)
self$dropout <- nn_dropout(dropout)
self$output <- nn_linear(hidden_size, 1)
},
forward = function(x) {
(x %>%
self$rnn())[[1]][, dim(x)[2], ] %>%
self$dropout() %>%
self$output()
}
)

input_size <- 1
hidden_size <- 32
num_layers <- 2
rec_dropout <- 0.2

model <- model %>%
setup(optimizer = optim_adam, loss = nn_mse_loss()) %>%
set_hparams(
input_size = input_size,
hidden_size = hidden_size,
num_layers = num_layers,
rec_dropout = rec_dropout
)
rates_and_losses <- model %>%
lr_finder(train_dl, start_lr = 1e-3, end_lr = 1)
rates_and_losses %>% plot()

fitted <- model %>%
    fit(train_dl, epochs = 500, valid_data = valid_dl,
        callbacks = list(
            luz_callback_early_stopping(patience = 150),
            luz_callback_lr_scheduler(
                lr_one_cycle,
                max_lr = 0.01,
                epochs = 500,
                steps_per_epoch = length(train_dl),
                call_on = "on_batch_end")
        ),
        verbose = TRUE)

evaluate(fitted, test_dl)

demand_viz <- sales_monthly %>%
    filter(year(Date) == 2023)

demand_viz_matrix <- demand_viz %>%
     as_tibble() %>%
     select(Sales) %>%
    as.matrix()

viz_ds <- sales_dataset(demand_viz_matrix, n_timesteps = 1)
viz_dl <- viz_ds %>% dataloader(batch_size = length(viz_ds))

preds <- predict(fitted, viz_dl)
preds <- preds$to(device = "cpu") %>% as.matrix()
preds <- c(rep(NA, n_timesteps), preds)

demand_viz<-as_tsibble(demand_viz)

pred_ts <- demand_viz %>%
add_column(forecast = preds * train_sd + train_mean) %>%
pivot_longer(-Date) %>%
update_tsibble(key = name)

pred_ts %>%
autoplot() +
scale_colour_manual(values = c("#08c5d1", "#00353f")) +
theme_minimal() +
theme(legend.position = "None")
